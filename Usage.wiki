#summary Using Stash
#labels Featured

=Quick Example=

{{{
// Get a Stash object from the StashBox class.
$stash = StashBox::getCache('user', $userId, 'info');

// Get the date from it, if any happens to be there.
$userInfo = $stash->get();

// Check to see if the cache missed, which could mean that it either didn't exist or was stale.
if($stash->isMiss())
{
	// Run the relatively expensive code.
	$userInfo = loadUserInfoFromDatabase($id);
	
	// Store the expensive code so the next time it doesn't miss.
	$stash->store($userInfo);
}
}}}


=Setting the Autoloader=

 Before using Stash the project should include the Autoloader. Once included there are two options for using it- you can use the *register()* function to load classes on demand _or_ the *loadAll()* function to load each class into the system immediately.

{{{
include('Stash/Autoloader.class.php');

// Lazy load classes as they're called
StashAutoloader::register();

// Load all classes at once.
StashAutoloader::loadAll();
}}}


=Creating Stash Objects=

 Creating a simple Stash object is fairly simple, although initializing it can take a couple of steps.

{{{
$stash = new Stash();

// Set the "key", which is the path the Stash object points to.
$stash->setupKey('path', 'to', 'data')
}}}


 This leaves Stash without any cross request storage, meaning the data will only be cached for the lifetime of that one script or request. Each Stash object needs a handler for persistent storage, which can be injected into the class during construction.

{{{
// Create Handler- this step is optional if you only need to store items for the lifetime of the script
$stashFileSystem = new StashFileSystem();

// Create the actual Stash, injecting the backend. 
$stash = new Stash($stashFileSystem);

// Set the "key", which is the path the Stash object points to. This will be discussed in depth later,
// but for now just know it's an identifier.
$stash->setupKey('path', 'to', 'data')
}}}

 Handlers are reusable, since the initialization of a handler can have overhead (database connections, file handlers, etc). To make this easier two wrapper are provided- *StashBox* and *StashManager*. These classes also encapsulate the "makeKey" process, allowing the whole process to get called through one function.

{{{
// Path defaults to an install specific temp folder
$stashFileSystem = new StashFileSystem(); 

StashBox::setHandler($stashFileSystem);
$stash = StashBox::getCache();


//For systems with multiple cache pools the StashManager wrapper can be used.
StashManager::setHandler('Pool Name', $stashFileSystem);
$stash = StashBox::getCache('Pool Name');
}}}


=Identifying Stored Data Using Keys=

 Stash identifies items in the cache pool using keys. Keys are simple a a series of strings or numbers defined by each individual project.

 The best way to think about keys is to think of them like a filesystem. Filesystems have different folders that contain more folders and files. Folders can be nested to virtually unlimited levels, allowing files to be organized according to various criteria. Stash uses the same principal- different nodes can contain both data and more nodes, allowing developers to group data together just like they would files. This makes clearing groups of items in the cache as simple as clearing their parent node, just like deleting a directory would erase all the files underneath.

 A project that had different models, each identified by an id and a type, might have it's keys for those models start with models/type/id, with individual pieces of data stored in keys inside of those. If the user "bob" had the id "32", the path to his data in the cache would be "models/users/32".

 Any functions that require a kay can accept in one of two ways. Each piece of the key can be passed as it's own argument, or they can be placed in an array which is then passed as a single argument.

{{{
// Pass the key as a series of arguments
$stash = StashBox::getCache('models', 'users', 32, 'info');

// or pass the key using an array.
$key = array('models', 'users', 32, 'info');
$stash = StashBox::getCache($key);
}}}


=Storing and Retrieving Data=

 The basic function of Stash is to store data so it can be retrieved later. This is meant to be as simple as possible, with three functions doing the bulk of the work.

  * *get()* - This function returns data that was previously stored, or null if nothing stored. Since it is possible to store null values it is very important not to rely on a null return to check for a cache miss. 
  * *isMiss()* - If the data requested doesn't exist or is stale this function returns true.
  * *lock()* - When called stampede protection is enabled.
  * *store($data, $expiration = null)* - This places the passed data into the persistent storage.

 These three functions work to create simple "cache blocks"- pieces of code that attempt to get the data, check for a miss and then store the data after it is calculated. 

{{{
// Attempt to "get"
$data = $stash->get();

// Check to see if the data was a miss.
if($stash->isMiss())
{
	// Run intensive code
	// This code takes a long time.
	
	// Store data.
	$stash->store($data);
}

// Continue as normal.
}}}

 The *store* function can take the expiration as an additional argument. This expiration can be a time, in seconds, that the cache should live or it can be a DateTime object that represents the time the cached item should expire. This argument can be negative, which will result in an immediately stale cache- this is primarily for testing. 

 In many cases this can be ignored, such as when there are calls to the Stash->clear() function whenever stored data is changed.

{{{
// Using an age.
$data = $stash->get();
if($stash->isMiss())
{
	$data = expensiveFunction();
	// Cache expires in one hour.
	$stash->store($data, 3600); 
}


// Using a DateTime.
$data = $stash->get();
if($stash->isMiss())
{
	$data = expensiveFunction();
		
	// Cache expires January 21, 2012.
	$expiration = new DateTime('2012-01-21');	
	$stash->store($data, $expiration); 
}
}}}

 It is important to note that the expiration- whether a date, age or the default time- is only the maximum possible age of the item, and that it is not at all guaranteed to stay in the cache for that long. In order to distribute cache misses the Stash system tries to vary the expiration time for items by shortening a random amount. Additionally some handlers have size restrictions or other criteria for removing items besides just time. However, the cache system will never consider an item fresh if it is picked up after the passed expiration.


=Stampede Protection=

 A stampede is when a cache miss causes multiple requests to attempt a rebuild of the cached item, in turn slowing down the system. Stash can prevent this behavior using a variety of invalidation techniques.

 Using Stampede protection is relatively straightforward. Expanding our earlier example by adding a new argument to the "get" function and a call to the "lock" function tells Stash everything it needs to know.

{{{
// Get a Stash object from the StashBox class.
$stash = StashBox::getCache('user', $userId, 'info');

// Get the data from the cache using the "STASH_SP_OLD" technique for dealing with stampedes
$userInfo = $stash->get(STASH_SP_OLD);

// Check to see if the cache missed, which could mean that it either didn't exist or was stale.
if($stash->isMiss())
{
	// Mark this instance as the one regenerating the cache. Because our protection method is 
	// STASH_SP_OLD other Stash instances will use the old value and count it as a hit.
	$stash->lock();
	
	// Run the relatively expensive code.
	$userInfo = loadUserInfoFromDatabase($id);
	
	// Store the expensive code so the next time it doesn't miss. The store function marks the 
	// stampede as over for now, so other Stash items will begin working as normal.
	$stash->store($userInfo);
}
}}}


==Invalidation Methods==

 Stash's stampede protection gives developers multiple ways to deal with stale data. Old values can be reused, new values set, or the cache can even be refreshed before it gets stale. Different methods can be set by passing the appropriate constant to Stash's "get" function.


===STASH_SP_NONE===

 By default Stash simply returns true for the "isMiss" function whenever the cache is invalid, meaning multiple cache misses can occur at once and stampede protection is not enabled. While not needed, this method can be explicitly set.

{{{
// preserves backward compatibility.
$stash->get(); 

// recommended if this method is explicitly wanted as the default value may change in the future.
$stash->get(STASH_SP_NONE); 

// returns false if the item is missing or expired, no exceptions.
$stash->isMiss(); 
}}}


===STASH_SP_PRECOMPUTE===

 The personal favorite method of the Stash developers, this method causes Stash to recalculate the cached item _before_ it misses.

 When this method is used Stash->get takes one additional argument, the amount of time (in seconds) before the expiration when it should regenerate the cache.
{{{
// five minutes before the cache expires one instance will return a miss, causing the cache to regenerate.
$stash->get(STASH_SP_PRECOMPUTE, 300);
}}}


===STASH_SP_OLD===

 When this method is enabled and a different instance has called the lock function Stash will return the existing value in the cache even if it is stale. 
{{{
$stash->get(STASH_SP_OLD);

// return false if another Stash instance is rebuilding the cached item even though the returned item is stale
$stash->isMiss(); 

}}}

===STASH_SP_VALUE===

 When this method is enabled and a different instance has called the lock function Stash will return the supplied value. 

 This method takes one additional argument, the value to be returned while stampede protection is on.
{{{
$stash->get(STASH_SP_VALUE, 'Return this if stampede protection stops a miss');

// returns true only if the value is stale and no other processes have stated rebuilding the value.
$stash->isMiss(); 
}}}

===STASH_SP_SLEEP===

 When this method is enabled and a different instance has called the lock function Stash will sleep and attempt to load the value upon waking up. This is not a website friendly method, but is potentially useful for cli or long running scripts.

 When this method is used Stash->get takes two additional arguments, the time (in microseconds) to sleep before reattempting to load the cache and the amount of times to try and reload it before giving up. The maximum amount of time spent sleeping is the product of these two numbers.
{{{
// sleeps for .5 seconds, reattempts to load the cache, 
// then sleeps again for another .5 seconds before making it's last attempt
$stash->get(STASH_SP_SLEEP, 500, 2); 
}}}


=Clearing Data=

 Clearing data is just as simple as getting it. As with the *get* and *store* functions, the *clear* function takes a set key- if one isn't set then the entire cache is cleared.

{{{
$stashFileSystem = new StashFileSystem();

// Clearing a key.
$stash = new Stash($stashFileSystem);
$stash->setupKey('path', 'to', 'data')
$stash->clear();

// Clearing everything.
$stash = new Stash($stashFileSystem);
$stash->clear();
}}}

 The *StashBox* and *StashManager* classes also have their own clearing mechanisms meant to make things easier. 

{{{
// Clear a path using StashBox
StashBox::clearCache('path', 'to', 'data');
// Clear the entire StashBox cache.
StashBox::clearCache();

// Clear a path in the "Main Cache" using the StashManager class.
StashManager::clearCache('Main Cache', 'path', 'to', 'data');
// Clear the entire "Main Cache".
StashManager::clearCache('Main Cache');
}}}


=Purging Data=

 The *purge* function removes stale data from the cache backends while leaving current data intact. Depending on the size of the cache and the specific handlers in use this can take some time, so it is best called as part of a separate maintenance task or as part of a cron job.

{{{
$stashFileSystem = new StashFileSystem();

// Purge the FileSystem
$stash = new Stash($stashFileSystem);
$stash->purge();

// The StashBox and StashManager classes also have their own clearing mechanisms meant to make things easier. 

// Purge the StashBox cache.
StashBox::purge();

// Purge the "Main Cache".
StashManager::purge('Main Cache');
}}}